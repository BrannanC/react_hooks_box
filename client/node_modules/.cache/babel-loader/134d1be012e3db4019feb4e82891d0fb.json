{"ast":null,"code":"import Web3 from \"web3\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (false) {\n      // window.ethereum\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Acccounts now exposed\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = new Web3(window.web3.currentProvider);\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      } // Fallback to localhost; use dev console port by default...\n      else {\n          const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n          const web3 = new Web3(provider);\n          console.log(\"No web3 instance injected, using Local web3.\");\n          resolve(web3);\n        }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["/Users/beacon/lambda/pmgroup/game_testing/client/src/utils/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","web3","ethereum","enable","error","currentProvider","console","log","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,QAAI,KAAJ,EAAW;AAAE;AACX,YAAMC,IAAI,GAAG,IAAIP,IAAJ,CAASK,MAAM,CAACG,QAAhB,CAAb;;AACA,UAAI;AACF;AACA,cAAMH,MAAM,CAACG,QAAP,CAAgBC,MAAhB,EAAN,CAFE,CAGF;;AACAN,QAAAA,OAAO,CAACI,IAAD,CAAP;AACD,OALD,CAKE,OAAOG,KAAP,EAAc;AACdN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACD;AACF,KAVD,CAWA;AAXA,SAYK,IAAIL,MAAM,CAACE,IAAX,EAAiB;AACpB;AACA,cAAMA,IAAI,GAAG,IAAIP,IAAJ,CAASK,MAAM,CAACE,IAAP,CAAYI,eAArB,CAAb;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAV,QAAAA,OAAO,CAACI,IAAD,CAAP;AACD,OALI,CAML;AANK,WAOA;AACH,gBAAMO,QAAQ,GAAG,IAAId,IAAI,CAACe,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;AAGA,gBAAMT,IAAI,GAAG,IAAIP,IAAJ,CAASc,QAAT,CAAb;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAV,UAAAA,OAAO,CAACI,IAAD,CAAP;AACD;AACF,GA7BD;AA8BD,CAhCD,CADF;;AAmCA,eAAeN,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (false) { // window.ethereum\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = new Web3(window.web3.currentProvider);\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}