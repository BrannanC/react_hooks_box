{"ast":null,"code":"import _slicedToArray from \"/Users/beacon/lambda/pmgroup/game_testing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/beacon/lambda/pmgroup/game_testing/client/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Game from \"./contracts/Game.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport \"./App.css\";\n\nconst App = () => {\n  const _useState = useState({\n    player_one: \"\",\n    web3: null,\n    player_two: \"\",\n    contract: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        gameState = _useState2[0],\n        setGameState = _useState2[1];\n\n  const initGame = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Game.networks[networkId];\n      const instance = new web3.eth.Contract(Game.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n\n      setGameState({\n        web3,\n        contract: instance\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    initGame();\n  }, []);\n  return !gameState.web3 ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Loading Web3, accounts, and contract...\") : React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Good to Go!\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/beacon/lambda/pmgroup/game_testing/client/src/App.js"],"names":["React","useEffect","useState","Game","getWeb3","App","player_one","web3","player_two","contract","gameState","setGameState","initGame","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","error","alert","console"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBACkBH,QAAQ,CAAC;AAAEI,IAAAA,UAAU,EAAE,EAAd;AAAkBC,IAAAA,IAAI,EAAE,IAAxB;AAA8BC,IAAAA,UAAU,EAAE,EAA1C;AAA8CC,IAAAA,QAAQ,EAAE;AAAxD,GAAD,CAD1B;AAAA;AAAA,QACTC,SADS;AAAA,QACEC,YADF;;AAGhB,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF;AACA,YAAML,IAAI,GAAG,MAAMH,OAAO,EAA1B,CAFE,CAIF;;AACA,YAAMS,QAAQ,GAAG,MAAMN,IAAI,CAACO,GAAL,CAASC,WAAT,EAAvB,CALE,CAOF;;AACA,YAAMC,SAAS,GAAG,MAAMT,IAAI,CAACO,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,YAAMC,eAAe,GAAGhB,IAAI,CAACiB,QAAL,CAAcJ,SAAd,CAAxB;AACA,YAAMK,QAAQ,GAAG,IAAId,IAAI,CAACO,GAAL,CAASQ,QAAb,CACfnB,IAAI,CAACoB,GADU,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB,CAVE,CAgBF;AACA;;AACAb,MAAAA,YAAY,CAAC;AAAEJ,QAAAA,IAAF;AAASE,QAAAA,QAAQ,EAAEY;AAAnB,OAAD,CAAZ;AACD,KAnBD,CAmBE,OAAOI,KAAP,EAAc;AACd;AACAC,MAAAA,KAAK,0EAAL;AAGAC,MAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,GA3BD;;AA4BAxB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIE,SACE,CAACF,SAAS,CAACH,IAAX,GAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAlB,GACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD,CAFH;AAMH,CAzCD;;AA2CA,eAAeF,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Game from \"./contracts/Game.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [gameState, setGameState] = useState({ player_one: \"\", web3: null, player_two: \"\", contract: null });\n\n  const initGame = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Game.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Game.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      setGameState({ web3,  contract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  }\n  useEffect(() => {\n    initGame()\n  }, []);\n\n    return (\n      !gameState.web3 ? <div>Loading Web3, accounts, and contract...</div> :\n       <div className=\"App\">\n        <h1>Good to Go!</h1>\n      </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}